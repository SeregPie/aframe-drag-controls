!function(e){"use strict";let{THREE:t}=e,{EventDispatcher:n,Matrix4:o,Plane:r,Raycaster:i,Vector2:s,Vector3:a}=t;const c=new r,l=new i,d=new s,p=new a,u=new a,m=new a,h=new o;class v extends n{constructor(e,t,n){super(),n.style.touchAction="none";let o=null,r=null;const i=[],s=this;function a(){n.addEventListener("pointermove",b),n.addEventListener("pointerdown",f),n.addEventListener("pointerup",E),n.addEventListener("pointerleave",E)}function v(){n.removeEventListener("pointermove",b),n.removeEventListener("pointerdown",f),n.removeEventListener("pointerup",E),n.removeEventListener("pointerleave",E),n.style.cursor=""}function b(a){if(!1!==s.enabled){if(g(a),l.setFromCamera(d,t),o)return l.ray.intersectPlane(c,u)&&o.position.copy(u.sub(p).applyMatrix4(h)),void s.dispatchEvent({type:"drag",object:o});if("mouse"===a.pointerType||"pen"===a.pointerType)if(i.length=0,l.setFromCamera(d,t),l.intersectObjects(e,!0,i),i.length>0){const e=i[0].object;c.setFromNormalAndCoplanarPoint(t.getWorldDirection(c.normal),m.setFromMatrixPosition(e.matrixWorld)),r!==e&&null!==r&&(s.dispatchEvent({type:"hoveroff",object:r}),n.style.cursor="auto",r=null),r!==e&&(s.dispatchEvent({type:"hoveron",object:e}),n.style.cursor="pointer",r=e)}else null!==r&&(s.dispatchEvent({type:"hoveroff",object:r}),n.style.cursor="auto",r=null)}}function f(r){!1!==s.enabled&&(g(r),i.length=0,l.setFromCamera(d,t),l.intersectObjects(e,!0,i),i.length>0&&(o=!0===s.transformGroup?e[0]:i[0].object,c.setFromNormalAndCoplanarPoint(t.getWorldDirection(c.normal),m.setFromMatrixPosition(o.matrixWorld)),l.ray.intersectPlane(c,u)&&(h.copy(o.parent.matrixWorld).invert(),p.copy(u).sub(m.setFromMatrixPosition(o.matrixWorld))),n.style.cursor="move",s.dispatchEvent({type:"dragstart",object:o})))}function E(){!1!==s.enabled&&(o&&(s.dispatchEvent({type:"dragend",object:o}),o=null),n.style.cursor=r?"pointer":"auto")}function g(e){const t=n.getBoundingClientRect();d.x=(e.clientX-t.left)/t.width*2-1,d.y=-(e.clientY-t.top)/t.height*2+1}a(),this.enabled=!0,this.transformGroup=!1,this.activate=a,this.deactivate=v,this.dispose=function(){v()},this.getObjects=function(){return e},this.getRaycaster=function(){return l}}}let b="drag-controls";e.registerComponent(b,{schema:{enabled:{default:!0},objects:{default:"*"}},init(){let{el:e}=this,{camera:t,renderer:n}=e.sceneEl,o=new v([],t,n.domElement);o.addEventListener("dragstart",(()=>{e.emit(`${b}:changed`,{active:!0},!1)})),o.addEventListener("dragend",(()=>{e.emit(`${b}:changed`,{active:!1},!1)}));let r=new Map;["dragstart","drag","dragend","hoveron","hoveroff"].forEach((e=>{o.addEventListener(e,(t=>{let{object:n}=t,o=r.get(n);o&&o.emit(e,{object3D:n},!1)}))})),Object.assign(this,{camera:t,controls:o,mapObjectToEl:r})},update(){let{controls:e,data:t}=this,{enabled:n}=t;Object.assign(e,{enabled:n})},remove(){this.controls.dispose()},tock(){let{controls:e,data:t,el:n,mapObjectToEl:o}=this,{enabled:r,objects:i}=t;if(r){let t=Array.from(n.sceneEl.querySelectorAll(i)),r=[];o.clear(),t.forEach((e=>{e.isEntity&&e.object3D&&Object.keys(e.object3DMap).forEach((t=>{let n=e.getObject3D(t);r.push(n),o.set(n,e)}))})),e.getObjects().splice(0,void 0,...r)}}})}(AFRAME);
